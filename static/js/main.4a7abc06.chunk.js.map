{"version":3,"sources":["img/helpIcon.svg","utilities.ts","components/editor/parentSelector/ParentSelector.tsx","components/editor/Editor.tsx","components/graph/graph.tsx","components/person-table/person-row/PersonRow.tsx","components/person-table/PersonTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","mostRecent","a","b","last_updated","id","getSpouse","people","person","find","p","spouse","getParents","filter","parents","includes","isDescendant","root","some","ParentSelector","setParents","parentOptions","useMemo","sort","map","key","value","name","className","src","helpIcon","alt","title","tabIndex","multiple","onChange","event","Array","from","target","selectedOptions","option","size","Editor","setPerson","closeEditor","useState","undefined","error","setError","updatedPerson","setUpdatedPerson","handleDateChange","spouseOptions","onSubmit","preventDefault","currentTarget","reset","placeholder","type","birth","death","onClick","Graph","props","graphPeople","family","spouses","state","items","config","pageFitMode","primitives","common","PageFitMode","None","cursorItem","linesWidth","linesColor","hasSelectorCheckbox","Enabled","False","normalLevelShift","dotLevelShift","lineLevelShift","normalItemsInterval","dotItemsInterval","lineItemsInterval","arrowsDirection","GroupByType","Parents","showExtraArrows","defaultTemplateName","templates","itemSize","width","height","minimizedItemSize","highlightPadding","left","top","right","bottom","onItemRender","itemConfig","context","itemTitleColor","Colors","RoyalBlue","this","centerOnCursor","Component","PersonRow","openEditor","isDescended","join","PersonTable","tableRows","getDescendants","length","x","Set","flatMap","App","data","localStorage","getItem","parsedData","JSON","parse","setFamily","selectedPerson","setSelectedPerson","editing","setEditing","showGraph","setShowGraph","uuid","Date","updatedFamily","findIndex","spouseIndex","updatedSpouse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4a7abc06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/helpIcon.f51255a2.svg\";","import { Person } from './types/person'\r\n\r\nexport const mostRecent = (a: Person, b: Person): number => {\r\n  if (!a || !a.last_updated) return -1\r\n  if (!b || !b.last_updated) return 1\r\n  if (a.id === b.id) return 0\r\n  return a.last_updated < b.last_updated ? 1 : -1\r\n}\r\n\r\n// export const getName = (name: Name | undefined): string => {\r\n//   if (!name) return ''\r\n\r\n//   return name.first.concat(\r\n//     name.middle ? ' ' + name.middle : '',\r\n//     ' ' + name.last\r\n//   )\r\n// }\r\n\r\nexport const getSpouse = (\r\n  people: Person[],\r\n  person: Person\r\n): Person | undefined => people.find((p) => p.id === person.spouse)\r\n\r\nexport const getParents = (\r\n  people: Person[],\r\n  person: Person\r\n): Person[] | undefined => people.filter((p) => person?.parents?.includes(p.id))\r\n\r\n// export const splitName = (\r\n//   name: string,\r\n//   setError: Dispatch<string>\r\n// ): Name => {\r\n//   const sections = name.split(' ')\r\n//   if (sections.length < 2 || sections.length > 3) setError('Invalid Name')\r\n\r\n//   const splitName: Name = {\r\n//     first: sections[0],\r\n//     middle: undefined,\r\n//     last: sections[1],\r\n//   }\r\n\r\n//   if (sections.length > 2) {\r\n//     splitName.middle = sections[1]\r\n//     splitName.last = sections[2]\r\n//   }\r\n\r\n//   return splitName\r\n// }\r\n\r\nexport const isDescendant = (\r\n  people: Person[],\r\n  person: Person,\r\n  root: string = '406be5f4-09dc-46a4-b604-493f6243952d'\r\n): boolean => {\r\n  if (!person.parents) return false\r\n  if (person.parents.includes(root)) return true\r\n  return getParents(people, person)!.some((p) => isDescendant(people, p))\r\n}\r\n\r\nexport const getDescendants = (people: Person[]): Person[] =>\r\n  people.filter((person) => isDescendant(people, person))\r\n\r\nexport const getNames = (persons: Person[] | undefined): string | undefined =>\r\n  persons?.reduce(\r\n    (accum, person, i) =>\r\n      accum.concat(person.name + (i < persons.length ? ', ' : '')),\r\n    ''\r\n  )\r\n","import React, { ChangeEvent, Dispatch, useMemo } from 'react'\r\nimport helpIcon from '../../../img/helpIcon.svg'\r\nimport { Person } from '../../../types/person'\r\nimport { mostRecent } from '../../../utilities'\r\nimport './ParentSelector.css'\r\n\r\ninterface ParentSelectorParams {\r\n  people: Person[]\r\n  parents?: string[]\r\n  setParents: Dispatch<string[]>\r\n}\r\n\r\nfunction ParentSelector({ people, parents, setParents }: ParentSelectorParams) {\r\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>): void =>\r\n    setParents(\r\n      Array.from(event.target.selectedOptions, (option) => option.value)\r\n    )\r\n\r\n  const parentOptions = useMemo(\r\n    () =>\r\n      people.sort(mostRecent).map((person) => (\r\n        <option key={person.id} value={person.id}>\r\n          {person.name}\r\n        </option>\r\n      )),\r\n    [people]\r\n  )\r\n\r\n  return (\r\n    <label>\r\n      Parents:\r\n      <img\r\n        className=\"helpIcon\"\r\n        src={helpIcon}\r\n        id=\"ParentSelector_helpIcon\"\r\n        alt=\"help icon\"\r\n        title=\"Ctrl + click to select multiple parents\"\r\n        tabIndex={0}\r\n      />\r\n      <span id=\"ParentSelector_helpIcon_text\">\r\n        Ctrl + click to select multiple parents\r\n      </span>\r\n      <select\r\n        name={'parents'}\r\n        className=\"right-aligned\"\r\n        multiple\r\n        onChange={handleChange}\r\n        value={parents}\r\n        size={10}\r\n      >\r\n        {parentOptions}\r\n      </select>\r\n    </label>\r\n  )\r\n}\r\n\r\nexport default ParentSelector\r\n","import React, {\r\n  ChangeEvent,\r\n  FormEvent,\r\n  MouseEvent,\r\n  useMemo,\r\n  useState,\r\n} from 'react'\r\nimport { Person } from '../../types/person'\r\nimport { mostRecent } from '../../utilities'\r\nimport './Editor.css'\r\nimport ParentSelector from './parentSelector/ParentSelector'\r\n\r\ninterface EditorParams {\r\n  people: Person[]\r\n  person?: Person\r\n  setPerson: (person: Partial<Person>) => void\r\n  closeEditor: () => void\r\n}\r\n\r\nfunction Editor({ people, person, setPerson, closeEditor }: EditorParams) {\r\n  const [error, setError] = useState<string | undefined>(undefined)\r\n  const [updatedPerson, setUpdatedPerson] = useState<Partial<Person>>({\r\n    ...person,\r\n  })\r\n\r\n  const handleSubmit = (event: FormEvent<HTMLFormElement>): void => {\r\n    event.preventDefault()\r\n    setPerson(updatedPerson)\r\n    event.currentTarget.reset()\r\n  }\r\n\r\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setError(undefined)\r\n    setUpdatedPerson({\r\n      ...updatedPerson,\r\n      name: event.target.value,\r\n    })\r\n  }\r\n\r\n  const handleDateChange = (event: ChangeEvent<HTMLInputElement>) =>\r\n    setUpdatedPerson({\r\n      ...updatedPerson,\r\n      [event.target.name]: event.target.value,\r\n    })\r\n\r\n  const setParents = (parents: string[]): void =>\r\n    setUpdatedPerson({ ...updatedPerson, parents })\r\n\r\n  const handleSpouseChange = (event: ChangeEvent<HTMLSelectElement>): void =>\r\n    setUpdatedPerson({ ...updatedPerson, spouse: event.target.value })\r\n\r\n  const handleBackroundClick = (event: MouseEvent<HTMLDivElement>): void =>\r\n    closeEditor()\r\n\r\n  const handleCancelClick = (event: MouseEvent<HTMLButtonElement>): void => {\r\n    event.preventDefault()\r\n    closeEditor()\r\n  }\r\n\r\n  const spouseOptions = useMemo(\r\n    () =>\r\n      people?.sort(mostRecent).map((person) => (\r\n        <option key={person.id} value={person.id}>\r\n          {person.name}\r\n        </option>\r\n      )),\r\n    [people]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <div id=\"Editor\">\r\n        <form onSubmit={handleSubmit}>\r\n          <h1>Add Person</h1>\r\n          <label>\r\n            Name:\r\n            <input\r\n              value={updatedPerson.name || ''}\r\n              onChange={handleNameChange}\r\n              className=\"right-aligned\"\r\n              placeholder=\"John Doe\"\r\n              type=\"text\"\r\n            ></input>\r\n          </label>\r\n\r\n          <label>\r\n            Year Born:\r\n            <input\r\n              name={'birth'}\r\n              value={updatedPerson.birth}\r\n              onChange={handleDateChange}\r\n              className=\"right-aligned\"\r\n              placeholder=\"1950\"\r\n              type=\"number\"\r\n            ></input>\r\n          </label>\r\n\r\n          <label>\r\n            Year Died:\r\n            <input\r\n              name={'death'}\r\n              value={updatedPerson.death}\r\n              onChange={handleDateChange}\r\n              className=\"right-aligned\"\r\n              placeholder=\"2011\"\r\n              type=\"number\"\r\n            ></input>\r\n          </label>\r\n\r\n          <ParentSelector\r\n            people={people}\r\n            parents={updatedPerson.parents}\r\n            setParents={setParents}\r\n          />\r\n\r\n          <label>\r\n            Spouse:\r\n            <select\r\n              name={'spouse'}\r\n              className=\"right-aligned\"\r\n              value={updatedPerson.spouse}\r\n              onChange={handleSpouseChange}\r\n            >\r\n              <option></option>\r\n              {spouseOptions}\r\n            </select>\r\n          </label>\r\n\r\n          {error && <span className=\"error right-aligned\">{`* ${error}`}</span>}\r\n          <div id=\"Editor_actions\">\r\n            <input type=\"submit\"></input>\r\n            <button className=\"secondary\" onClick={handleCancelClick}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div id=\"Editor_background\" onClick={handleBackroundClick}></div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Editor\r\n","import primitives from 'basicprimitives'\r\nimport { FamDiagram } from 'basicprimitivesreact'\r\nimport React, { Component } from 'react'\r\nimport { Person } from '../../types/person'\r\nimport './graph.css'\r\n\r\ntype GraphProps = {\r\n  family: Person[]\r\n}\r\ntype GraphState = {\r\n  items: GraphPerson[]\r\n}\r\n\r\ntype GraphPerson = {\r\n  id: string\r\n  parents?: string[]\r\n  spouses?: string[]\r\n  title: string\r\n}\r\n\r\nexport class Graph extends Component<GraphProps, GraphState> {\r\n  constructor(props: GraphProps) {\r\n    super(props)\r\n    const graphPeople = props.family\r\n      .sort((a, b) => (a.birth && b.birth && a.birth < b.birth ? -1 : 1))\r\n      .map<GraphPerson>((person) => {\r\n        return {\r\n          id: person.id,\r\n          parents: person.parents,\r\n          spouses: person.spouse ? [person.spouse] : undefined,\r\n          title: person.name,\r\n        }\r\n      })\r\n    this.state = { items: graphPeople }\r\n  }\r\n\r\n  render() {\r\n    const config = {\r\n      pageFitMode: primitives.common.PageFitMode.None,\r\n      cursorItem: 2,\r\n      linesWidth: 1,\r\n      linesColor: 'black',\r\n      hasSelectorCheckbox: primitives.common.Enabled.False,\r\n      normalLevelShift: 20,\r\n      dotLevelShift: 20,\r\n      lineLevelShift: 20,\r\n      normalItemsInterval: 10,\r\n      dotItemsInterval: 30,\r\n      lineItemsInterval: 30,\r\n      arrowsDirection: primitives.common.GroupByType.Parents,\r\n      showExtraArrows: false,\r\n      defaultTemplateName: 'template',\r\n      templates: [\r\n        {\r\n          name: 'template',\r\n          itemSize: { width: 100, height: 50 },\r\n          minimizedItemSize: { width: 3, height: 3 },\r\n          highlightPadding: { left: 2, top: 2, right: 2, bottom: 2 },\r\n          onItemRender: ({ context: itemConfig }: any) => {\r\n            const itemTitleColor =\r\n              itemConfig.itemTitleColor != null\r\n                ? itemConfig.itemTitleColor\r\n                : primitives.common.Colors.RoyalBlue\r\n            return (\r\n              <div className=\"ContactTemplate\">\r\n                <div className=\"ContactTitle\">{itemConfig.title}</div>\r\n              </div>\r\n            )\r\n          },\r\n        },\r\n      ],\r\n      items: this.state.items,\r\n    }\r\n\r\n    return (\r\n      <div id=\"graph\">\r\n        <FamDiagram centerOnCursor={true} config={config} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { MouseEvent, useMemo } from 'react'\r\nimport { Person } from '../../../types/person'\r\nimport { getParents, getSpouse, isDescendant } from '../../../utilities'\r\nimport './PersonRow.css'\r\n\r\ninterface PersonRowParams {\r\n  people: Person[]\r\n  person: Person\r\n  openEditor: (person: Person) => void\r\n}\r\n\r\nfunction PersonRow({ people, person, openEditor }: PersonRowParams) {\r\n  const handleRowClick = (event: MouseEvent<HTMLTableRowElement>) =>\r\n    openEditor(person)\r\n\r\n  const isDescended: boolean = useMemo(() => isDescendant(people, person), [\r\n    people,\r\n    person,\r\n  ])\r\n\r\n  return (\r\n    <tr onClick={handleRowClick}>\r\n      <td>{isDescended ? <strong>{person.name}</strong> : person.name}</td>\r\n      <td>{person.birth}</td>\r\n      <td>{person.death}</td>\r\n      <td>\r\n        {getParents(people, person)\r\n          ?.map((p) => p.name)\r\n          .join(', ')}\r\n      </td>\r\n      <td>{getSpouse(people, person)?.name}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default PersonRow\r\n","import React, { useMemo } from 'react'\r\nimport { Person } from '../../types/person'\r\nimport { getDescendants, mostRecent } from '../../utilities'\r\nimport PersonRow from './person-row/PersonRow'\r\nimport './PersonTable.css'\r\n\r\ninterface PersonTableParams {\r\n  people: Person[]\r\n  openEditor: (person: Person) => void\r\n}\r\n\r\nfunction PersonTable({ people, openEditor }: PersonTableParams) {\r\n  const tableRows = useMemo(\r\n    () =>\r\n      people\r\n        .sort(mostRecent)\r\n        .map((person) => (\r\n          <PersonRow\r\n            key={person.id}\r\n            people={people}\r\n            person={person}\r\n            openEditor={openEditor}\r\n          />\r\n        )),\r\n    [people, openEditor]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>\r\n              Name ({getDescendants(people).length}/\r\n              {people.filter((x) => x.name).length})\r\n            </th>\r\n            <th>Birth ({people.filter((x) => x.birth).length})</th>\r\n            <th>Death ({people.filter((x) => x.death).length})</th>\r\n            <th>\r\n              Parents (\r\n              {Array.from(new Set(people.flatMap((p) => p.parents))).length})\r\n            </th>\r\n            <th>Spouse ({people.filter((x) => x.spouse).length})</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{tableRows}</tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PersonTable\r\n","import React, { MouseEvent, useState } from 'react'\nimport { v4 as uuid } from 'uuid'\nimport './App.css'\nimport Editor from './components/editor/Editor'\nimport { Graph } from './components/graph/graph'\nimport PersonTable from './components/person-table/PersonTable'\nimport { Person } from './types/person'\nimport { getSpouse } from './utilities'\n\nfunction App() {\n  const data = localStorage.getItem('family')\n  const parsedData: Person[] = data && JSON.parse(data)\n\n  const [family, setFamily] = useState<Person[]>(parsedData ? parsedData : [])\n  const [selectedPerson, setSelectedPerson] = useState<Person>()\n  const [editing, setEditing] = useState<boolean>(false)\n  const [showGraph, setShowGraph] = useState<boolean>(false)\n\n  const closeEditor = () => setEditing(false)\n  const openEditor = (person: Person) => {\n    setSelectedPerson(person)\n    setEditing(true)\n  }\n  const handleAddPerson = (event: MouseEvent<HTMLButtonElement>) => {\n    setSelectedPerson(undefined)\n    setEditing(true)\n  }\n  const toggleGraph = (event: MouseEvent<HTMLButtonElement>) => {\n    setShowGraph(!showGraph)\n  }\n\n  const setPerson = (person: Partial<Person>) => {\n    const updatedPerson: Person = {\n      id: person.id ? person.id : uuid(),\n      name: person.name!,\n      birth: person.birth,\n      death: person.death,\n      parents: person.parents,\n      spouse: person.spouse,\n      last_updated: new Date(),\n    }\n\n    const updatedFamily = person.id ? [...family] : [updatedPerson, ...family]\n    if (person.id)\n      updatedFamily[family.findIndex((p) => person.id === p.id)] = updatedPerson\n\n    if (person.spouse) {\n      const spouse = getSpouse(updatedFamily, updatedPerson)!\n      const spouseIndex = updatedFamily.findIndex(\n        (person) => person.id === spouse?.id\n      )\n      const updatedSpouse = { ...spouse, spouse: updatedPerson.id }\n      updatedFamily[spouseIndex] = updatedSpouse\n    }\n\n    localStorage.setItem('family', JSON.stringify(updatedFamily))\n    setSelectedPerson(undefined)\n    setFamily(updatedFamily)\n    closeEditor()\n  }\n\n  return (\n    <div id=\"App\" className=\"center-aligned\">\n      {editing && (\n        <Editor\n          people={family}\n          person={selectedPerson}\n          setPerson={setPerson}\n          closeEditor={closeEditor}\n        />\n      )}\n      <div id=\"App_header\">\n        <h1>Family Tree Builder</h1>\n        {!showGraph && (\n          <button\n            id=\"App_add-person\"\n            className=\"primary right-aligned\"\n            onClick={handleAddPerson}\n          >\n            Add Person\n          </button>\n        )}\n        <button\n          id=\"App_toggle-graph\"\n          className={'secondary' + (showGraph ? ' right-aligned' : '')}\n          onClick={toggleGraph}\n        >\n          {showGraph ? 'Show Table' : 'Show Graph'}\n        </button>\n      </div>\n      {!showGraph && <PersonTable people={family} openEditor={openEditor} />}\n      {showGraph && <Graph family={family} />}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}